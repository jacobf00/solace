package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.74

import (
	"context"
	"fmt"

	"github.com/jacobf00/solace/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, username string, email string, password string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// CreateProblem is the resolver for the createProblem field.
func (r *mutationResolver) CreateProblem(ctx context.Context, title string, description string, context *string, category *string) (*model.Problem, error) {
	panic(fmt.Errorf("not implemented: CreateProblem - createProblem"))
}

// MarkVerseAsRead is the resolver for the markVerseAsRead field.
func (r *mutationResolver) MarkVerseAsRead(ctx context.Context, readingPlanID string, verseID string, isRead bool) (*model.ReadingPlanItem, error) {
	panic(fmt.Errorf("not implemented: MarkVerseAsRead - markVerseAsRead"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Problem is the resolver for the problem field.
func (r *queryResolver) Problem(ctx context.Context, id string) (*model.Problem, error) {
	panic(fmt.Errorf("not implemented: Problem - problem"))
}

// ReadingPlan is the resolver for the readingPlan field.
func (r *queryResolver) ReadingPlan(ctx context.Context, id string) (*model.ReadingPlan, error) {
	panic(fmt.Errorf("not implemented: ReadingPlan - readingPlan"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
